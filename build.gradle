plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'java'
	id 'maven-publish'
	id 'jacoco'
	id "me.champeau.gradle.jmh" version "0.5.2"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = "energy"
group = "teamreborn"

def getVersionName = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

version = getVersionName()
logger.lifecycle("Building Energy: " + version)

repositories {
	mavenCentral()
	maven {
		name = "Technici4n"
		url = "https://raw.githubusercontent.com/Technici4n/Technici4n-maven/master/"
		content {
			includeGroup "net.fabricmc.fabric-api"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_version}:v2"

	modImplementation  "net.fabricmc:fabric-loader:0.10.8"

	// Temporary WIP fabric api fork
	include modApi("net.fabricmc.fabric-api:fabric-api-lookup-api-v1:1.3.0+b246072f13")
	include modApi("net.fabricmc.fabric-api:fabric-transfer-api-v1:1.1.0-pre.06+c35ca56f18")
	modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	testCompileOnly 'junit:junit:4.12'
}

sourceSets {
	test {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
	jmh {
		compileClasspath += sourceSets.test.output
		runtimeClasspath += sourceSets.test.output
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release =16
}

jar {
	from "LICENSE"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

javadoc {
	source = sourceSets.main.allJava
}

jmh {
	duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
	iterations = 5
	fork = 2
}

build.dependsOn jacocoTestReport
build.dependsOn test
build.dependsOn javadoc
build.dependsOn sourcesJar

publishing {
	publications {
		maven(MavenPublication) {
			groupId 'teamreborn'
			artifactId project.archivesBaseName
			version project.version

			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
	repositories {
		maven {
			url "http://mavenupload.modmuss50.me/"
			if (project.hasProperty('mavenPass')) {
				credentials {
					username 'buildslave'
					password project.getProperty('mavenPass')
				}
			}
		}
	}
}
